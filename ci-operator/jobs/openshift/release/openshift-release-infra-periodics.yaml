periodics:
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: aws
    job-type: build
  name: release-openshift-origin-assemble
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --namespace=$(NAMESPACE)
      - --target=[release:initial]
      - --target=[release:latest]
      command:
      - ci-operator
      env:
      - name: NAMESPACE
      - name: RELEASE_IMAGE_LATEST
      - name: RELEASE_IMAGE_INITIAL
      - name: BRANCH
        value: "4.5"
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  decoration_config:
    skip_cloning: true
  labels:
    pj-rehearse.openshift.io/can-be-rehearsed: "true"
  name: cpaas-cvp-optional-operator-common-tests
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --branch=cvp-ocp-$(OCP_VERSION)
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --org=redhat-operator-ecosystem
      - --repo=playground
      - --resolver-address=http://ci-operator-configresolver-ci.apps.ci.l2s4.p1.openshiftapps.com
      - --secret-dir=/usr/local/cvp-common-$(CLUSTER_TYPE)-cluster-profile
      - --target=cvp-common-$(CLUSTER_TYPE)
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(OCP_VERSION)
      - --input-hash=$(CLUSTER_TYPE)
      command:
      - ci-operator
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/cvp-common-aws-cluster-profile
        name: cluster-profile-aws
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /etc/sentry-dsn
        name: sentry-dsn
        readOnly: true
      - mountPath: /etc/registry
        name: registry
        readOnly: true
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile-aws
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: sentry-dsn
      secret:
        secretName: sentry-dsn
    - configMap:
        name: step-registry
      name: registry
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: osd-ephemeral
    job-release: "4.1"
    job-type: launch
  name: release-openshift-origin-installer-launch-osd-ephemeral
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --secret-dir=/usr/local/cluster-bot-aws-account-for-ephemeral-osd
      - --secret-dir=/usr/local/cluster-bot-cloud-sso-for-ocm-ephemeral-osd
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: COMPUTE_MACHINE_TYPE
        value: m5.xlarge
      - name: USER_ID
        value: none
      - name: COMPUTE_NODES
        value: "2"
      - name: BRANCH
        value: "4.1"
      - name: CLUSTER_TYPE
        value: aws
        #value: osd-ephemeral
      - name: CONFIG_SPEC
        value: |
          base_images:
            cli-ocm:
              name: cli-ocm
              namespace: ci
              tag: latest
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: launch
            commands: |
              set -e
              HOME=/tmp
              cd $HOME
              CLUSTER_NAME=bot-$(USER_ID)
              ocm login --url staging --client-id ocm-developer-productivity-staging --client-secret $(cat /tmp/sso-staging/token)
              # TODO: change expiration of cluster according to CLUSTER_DURATION
              ocm create cluster --aws-account-id $(cat /tmp/aws/AWS_ACCOUNT_ID) \
                                 --aws-access-key-id $(cat /tmp/aws/AWS_ACCESS_KEY_ID) \
                                 --aws-secret-access-key $(cat /tmp/aws/AWS_SECRET_ACCESS_KEY) \
                                 --ccs $CLUSTER_NAME \
                                 --compute-machine-type $(COMPUTE_MACHINE_TYPE) \
                                 --compute-nodes $(COMPUTE_NODES) > /tmp/cluster_info
              set -x
              cat /tmp/cluster_info
              CLUSTER_ID=$(cat /tmp/cluster_info | grep '^ID:' | tr -d '[:space:]' | cut -d ':' -f 2)
              for i in {1..60}; do
                sleep 60
                CLUSTER_STATE=$(ocm cluster status $CLUSTER_ID | grep 'State:' | tr -d '[:space:]' | cut -d ':' -f 2)
                echo "Cluster state: $CLUSTER_STATE"
                if [[ "$CLUSTER_STATE" == "ready" ]]; then
                  echo "Cluster is reported as ready"
                  break
                fi
                if [[ "$CLUSTER_STATE" != "installing" || "$CLUSTER_STATE" != "pending" ]]; then
                  echo "Cluster in invalid state: $CLUSTER_STATE"
                  exit 1
                fi
              done
              ocm get /api/clusters_mgmt/v1/clusters/$CLUSTER_ID/credentials | ./jq -r .kubeconfig > /tmp/admin.kubeconfig
              while true; do
                # If status fails three times, assume the cluster is gone and set -x will terminate the script.
                ocm cluster status $CLUSTER_ID || ocm cluster status $CLUSTER_ID || ocm cluster status $CLUSTER_ID
                sleep 10m
              done
            container:
              from: cli-ocm
            secrets:
            - mount_path: /tmp/sso-staging
              name: cluster-bot-cloud-sso-for-ocm-ephemeral-osd
            - mount_path: /tmp/aws
              name: cluster-bot-aws-account-for-ephemeral-osd
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
      - mountPath: /usr/local/cluster-bot-cloud-sso-for-ocm-ephemeral-osd
        name: cluster-bot-cloud-sso-for-ocm-ephemeral-osd
      - mountPath: /usr/local/cluster-bot-aws-account-for-ephemeral-osd
        name: cluster-bot-aws-account-for-ephemeral-osd
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - configMap:
        name: prow-job-cluster-launch-installer-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
    - name: cluster-bot-aws-account-for-ephemeral-osd
      secret:
        secretName: cluster-bot-aws-account-for-ephemeral-osd
    - name: cluster-bot-cloud-sso-for-ocm-ephemeral-osd
      secret:
        secretName: cluster-bot-cloud-sso-for-ocm-ephemeral-osd
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: aws
    job-release: "4.1"
    job-type: launch
  name: release-openshift-origin-installer-launch-aws
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: BRANCH
        value: "4.1"
      - name: CLUSTER_TYPE
        value: aws
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-builds
            commands: TEST_SUITE=openshift/build run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive-all
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-all
            commands: TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-ecosystem
            commands: TEST_SUITE=openshift/image-ecosystem run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-registry
            commands: TEST_SUITE=openshift/image-registry run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-network-stress
            commands: TEST_SUITE=openshift/network/stress run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-all
            commands: TEST_SUITE=all run-upgrade-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-partial
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=random run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-rollback
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=100 run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch
            commands: sleep $(CLUSTER_DURATION) & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - configMap:
        name: prow-job-cluster-launch-installer-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: azure
    job-release: "4.2"
    job-type: launch
  name: release-openshift-origin-installer-launch-azure
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: BRANCH
        value: "4.2"
      - name: CLOUD_TYPE
        value: azure
      - name: CLUSTER_TYPE
        value: azure4
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-builds
            commands: TEST_SUITE=openshift/build run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive-all
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-all
            commands: TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-ecosystem
            commands: TEST_SUITE=openshift/image-ecosystem run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-registry
            commands: TEST_SUITE=openshift/image-registry run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-network-stress
            commands: TEST_SUITE=openshift/network/stress run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-all
            commands: TEST_SUITE=all run-upgrade-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-partial
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=random run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-rollback
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=100 run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch
            commands: sleep $(CLUSTER_DURATION) & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-azure4
    - configMap:
        name: prow-job-cluster-launch-installer-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: gcp
    job-release: "4.2"
    job-type: launch
  name: release-openshift-origin-installer-launch-gcp
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: BRANCH
        value: "4.2"
      - name: CLUSTER_TYPE
        value: gcp
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-builds
            commands: TEST_SUITE=openshift/build run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive-all
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-all
            commands: TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-ecosystem
            commands: TEST_SUITE=openshift/image-ecosystem run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-registry
            commands: TEST_SUITE=openshift/image-registry run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-network-stress
            commands: TEST_SUITE=openshift/network/stress run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-all
            commands: TEST_SUITE=all run-upgrade-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-partial
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=random run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-rollback
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=100 run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch
            commands: sleep $(CLUSTER_DURATION) & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-gcp
    - configMap:
        name: prow-job-cluster-launch-installer-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: metal
    job-release: "4.2"
    job-type: launch
  name: release-openshift-origin-installer-launch-metal
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: BRANCH
        value: "4.2"
      - name: CLUSTER_TYPE
        value: metal
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-builds
            commands: TEST_SUITE=openshift/build run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-disruptive
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-disruptive-all
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-all
            commands: TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-image-ecosystem
            commands: TEST_SUITE=openshift/image-ecosystem run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-image-registry
            commands: TEST_SUITE=openshift/image-registry run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-network-stress
            commands: TEST_SUITE=openshift/network/stress run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
          - as: e2e-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
              upgrade: true
          - as: e2e-upgrade-all
            commands: TEST_SUITE=all run-upgrade-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
              upgrade: true
          - as: e2e-upgrade-partial
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=random run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
              upgrade: true
          - as: e2e-upgrade-rollback
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=100 run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
              upgrade: true
          - as: launch
            commands: sleep $(CLUSTER_DURATION) & wait
            openshift_installer:
              cluster_profile: "aws" # work around lack of metal support
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-metal-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-metal
    - configMap:
        name: prow-job-cluster-launch-installer-metal-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: vsphere
  cron: '@yearly'
  decorate: true
  labels:
    job-env: vsphere
    job-release: "4.2"
    job-type: launch
  name: release-openshift-origin-installer-launch-vsphere
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --namespace=$(NAMESPACE)
      - --secret-dir=/usr/local/launch-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=launch
      - --template=/usr/local/launch
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: CLUSTER_DURATION
        value: "9000"
      - name: BRANCH
        value: "4.2"
      - name: CLUSTER_TYPE
        value: vsphere
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-builds
            commands: TEST_SUITE=openshift/build run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-disruptive-all
            commands: setup_ssh_bastion; TEST_SUITE=openshift/disruptive run-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-ecosystem
            commands: TEST_SUITE=openshift/image-ecosystem run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-image-registry
            commands: TEST_SUITE=openshift/image-registry run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-network-stress
            commands: TEST_SUITE=openshift/network/stress run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-all
            commands: TEST_SUITE=all run-upgrade-tests; TEST_SUITE=openshift/conformance run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-partial
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=random run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: e2e-upgrade-rollback
            commands: TEST_SUITE=all TEST_UPGRADE_OPTIONS=abort-at=100 run-upgrade-tests; TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch
            commands: sleep $(CLUSTER_DURATION) & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      - name: JOB_NAME_SAFE
        value: launch
      - name: TEST_COMMAND
        value: sleep $(CLUSTER_DURATION) & wait
      - name: NAMESPACE
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/launch-cluster-profile
        name: cluster-profile
      - mountPath: /usr/local/launch
        name: job-definition
        subPath: cluster-launch-installer-upi-e2e.yaml
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-vsphere
    - configMap:
        name: prow-job-cluster-launch-installer-upi-e2e
      name: job-definition
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: aws
    job-test: e2e
    job-type: upgrade
    tag: "1"
  name: release-openshift-origin-installer-e2e-aws-upgrade
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --secret-dir=/usr/local/e2e-$(CLUSTER_TYPE)-upgrade-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=e2e-$(CLUSTER_TYPE)-upgrade
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: BRANCH
        value: "4.1"
      - name: CLUSTER_TYPE
        value: aws
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e-$(CLUSTER_TYPE)
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch-$(CLUSTER_TYPE)
            commands: sleep 9000 & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: aws
    job-test: e2e
    job-type: upgrade
    tag: "1"
  name: release-openshift-okd-installer-e2e-aws-upgrade
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --secret-dir=/usr/local/e2e-$(CLUSTER_TYPE)-upgrade-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=e2e-$(CLUSTER_TYPE)-upgrade
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: BRANCH
        value: "4.1"
      - name: CLUSTER_TYPE
        value: aws
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e-$(CLUSTER_TYPE)
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch-$(CLUSTER_TYPE)
            commands: sleep 9000 & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: azure
    job-test: e2e
    job-type: upgrade
  name: release-openshift-origin-installer-e2e-azure-upgrade
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --secret-dir=/usr/local/e2e-azure-upgrade-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=e2e-azure-upgrade
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: BRANCH
        value: "4.3"
      - name: CLUSTER_TYPE
        value: azure4
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e-azure-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-azure-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-azure4
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: api.ci
  cron: '@yearly'
  decorate: true
  labels:
    job-env: gcp
    job-test: e2e
    job-type: upgrade
  name: release-openshift-origin-installer-e2e-gcp-upgrade
  spec:
    containers:
    - args:
      - --artifact-dir=$(ARTIFACTS)
      - --give-pr-author-access-to-namespace=true
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --kubeconfig=/etc/apici/kubeconfig
      - --lease-server-password-file=/etc/boskos/password
      - --lease-server-username=ci
      - --secret-dir=/usr/local/e2e-$(CLUSTER_TYPE)-upgrade-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --target=e2e-$(CLUSTER_TYPE)-upgrade
      command:
      - ci-operator
      env:
      - name: RELEASE_IMAGE_INITIAL
      - name: RELEASE_IMAGE_LATEST
      - name: CLUSTER_VARIANT
      - name: BRANCH
        value: "4.1"
      - name: CLUSTER_TYPE
        value: gcp
      - name: CONFIG_SPEC
        value: |
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          tests:
          - as: e2e-$(CLUSTER_TYPE)
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-upgrade
            commands: TEST_SUITE=all run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch-$(CLUSTER_TYPE)
            commands: sleep 9000 & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/apici
        name: apici-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-gcp-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: apici-ci-operator-credentials
      secret:
        items:
        - key: sa.ci-operator.apici.config
          path: kubeconfig
        secretName: apici-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: password
          path: password
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-gcp
        - configMap:
            name: cluster-profile-gcp
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
